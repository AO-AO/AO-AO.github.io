<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[AO-AO]]></title>
  <link href="https://ao-ao.github.io/atom.xml" rel="self"/>
  <link href="https://ao-ao.github.io/"/>
  <updated>2018-07-05T19:09:25+08:00</updated>
  <id>https://ao-ao.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[Ansible EC2 集群运维]]></title>
    <link href="https://ao-ao.github.io/15308650901238.html"/>
    <updated>2018-07-06T16:18:10+08:00</updated>
    <id>https://ao-ao.github.io/15308650901238.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>参考文档<br/>
<a href="http://www.ansible.com.cn/docs/intro_dynamic_inventory.html#aws-ec2-inventory">http://www.ansible.com.cn/docs/intro_dynamic_inventory.html#aws-ec2-inventory</a></p>
</blockquote>

<p>文档中的下载链接可能失效，请戳：<br/>
<a href="media/15308650901238/ec2.py">ec2.py</a><br/>
<a href="media/15308650901238/ec2.ini">ec2.ini</a></p>

<h2 id="toc_0">夺命三连</h2>

<ol>
<li>按照文档安装好ansible</li>
<li>将上述两个文件放到一个目录下</li>
<li>执行指令</li>
</ol>

<h2 id="toc_1">Sample</h2>

<pre><code class="language-shell">ansible -i ec2.py -u ec2-user tag_aws_autoscaling_groupName_EC2ContainerService_gx_app_cluster_EcsInstanceAsg_ERHSYTLKM3T7 -m copy -a &quot;src=~/.ssh/id_rsa dest=~/id_rsa&quot;
</code></pre>

<pre><code class="language-shell">export HOST_KEY_CHECKING=False; 
ansible -i ec2.py -u ubuntu tag_Name_GX_IAP_Proxy -m shell -a &quot;df -lh&quot;
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis实现分布式资源锁]]></title>
    <link href="https://ao-ao.github.io/15307872124785.html"/>
    <updated>2018-07-05T18:40:12+08:00</updated>
    <id>https://ao-ao.github.io/15307872124785.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">应用场景</h3>

<p>高并发场景中实现对资源的快速分发.</p>

<h3 id="toc_1">实现原理</h3>

<h4 id="toc_2">基础</h4>

<p>redis的分布式锁.</p>

<blockquote>
<p><a href="https://redis.io/topics/distlock">Redis分布式锁参考文档</a></p>
</blockquote>

<h4 id="toc_3">扩展</h4>

<p>扩展redis的分布式锁, 锁的过期时间作为分发周期, 锁的value作为资源数量限制.</p>

<ol>
<li>在每次分发请求尝试重设资源锁(资源锁value为分发数量, 资源锁拥有过期时间)</li>
<li>每次分发对资源锁-count(需要通过lua脚本自定义原子操作incrbyex)</li>
<li>根据2中的结果判断是否分发</li>
</ol>

<h3 id="toc_4">伪代码</h3>

<pre><code class="language-javascript">/**
 * @param {String} lockName 锁key (redis key)
 * @param {Number} resouceCount 锁value (redis value)
 * @param {Number} period 毫秒锁过期时间 (redis expire)
 * @returns true | false, 可以下发 | 不能下发
 */
async function getSetDeliverLock(lockName, resouceCount, period){

    // 尝试重设deliver
    try {
        setReply = await trySetNewDeliver(lockName, resouceCount, period);
    } catch (err) {
        console.error(err);
    }

    // 控制分发
    let incrbyexReply = null;
    try{
        incrbyexReply = await incrbyex(lockName, -1);
    } catch (err) {
        throw(err);
    }
    if(incrbyexReply !== null &amp;&amp; Number(incrbyexReply) &gt;= 0){
        return true;
    } else {
        return false;
    }
}

/**
 * @param {String} lockName 锁key (redis key)
 * @param {Number} resouceCount 锁value (redis value)
 * @param {Number} period 毫秒锁过期时间 (redis expire)
 * @returns true | false, set成功 | set失败
 */
async function trySetNewDelive(lockName, resouceCount, expireTimeMs) {
    let setReply = null;
    try {
        setReply = await redisCli.set(lockName, resouceCount, &#39;PX&#39;, period, &#39;NX&#39;);
    } catch (err) {
       throw (err);
    }
    if(setReply) {
        return true;
    } else {
        return false;
    }
}
</code></pre>

<p>需要注意的是, redis的incrbyex方法是自己定义的一个原子操作, 代码如下:</p>

<blockquote>
<p>原生的redis incrby方法, 在高并发场景中, 可能因为对已经过期的key进行incrby导致死锁产生.</p>
</blockquote>

<pre><code class="language-javascript">/**
 *
 * @param {*} key
 * @param {*} count
 * @returns key不存在返回null,否则返回incrby结果
 */
incrbyex(key, count) {
    let lua_script = &#39;local result,v v = redis.call(&quot;exists&quot;, ARGV[1]) if v == 1 then result = redis.call(&quot;incrby&quot;, ARGV[1], ARGV[2]) end return result&#39;;
    return RedisCli.eval(lua_script, 0, key, count);
}
</code></pre>

<h3 id="toc_5">优化</h3>

<ol>
<li>trySetNewDelive 会对redis primary节点造成较大压力, 可以先通过redis replica节点校验锁是否存在来减轻primary节点的压力.</li>
</ol>

]]></content>
  </entry>
  
</feed>
